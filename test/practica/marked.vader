# Marked

Execute (command/exec/pipe1):
  let marked = M.pipe('marked')
  call transformer#cmd('Marked').stream(
    \   S.data('*hello*'),
    \   marked,
    \   M.buf('%')
    \ )
  Marked

Expect (command/exec/pipe1/result):
  <p><em>hello</em></p>
  

Given (command/exec/pipe2):
  first line.

Execute (command/exec/pipe2):
  call transformer#cmd('Marked')
    \.src(S.data('second line.'))
    \.stream(M.buf('%2'))
  Marked

Expect (marked result):
  first line.
  second line.

# TODO support setline overflow count lines.
# Given (command/exec/pipe2):
#   first line.
#
# Execute (command/exec/pipe2):
#   call transformer#cmd('Marked')
#     \.src(S.data('second line.'))
#     \.stream(M.buf('%3'))
#   Marked
#
# Expect (marked result):
#   first line.
#   
#   second line.


Execute (command/exec/pipe3):
  call transformer#cmd('Marked')
    \.src(S.data('*hello*'))
    \.stream(marked)
    \.stream(M.buf('%'))
  Marked

Expect (command/exec/pipe1/marked result):
  <p><em>hello</em></p>
  

# vim: fdm=indent
